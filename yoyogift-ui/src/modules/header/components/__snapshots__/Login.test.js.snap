// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render Login 1`] = `
<WithStyles(ForwardRef(Grid))
  alignItems="center"
  container={true}
  direction="column"
  justify="center"
  spacing={0}
  style={
    Object {
      "minHeight": "100vh",
    }
  }
>
  <WithStyles(ForwardRef(Grid))
    item={true}
    xs={10}
  >
    <div
      className="makeStyles-mainContainer-5"
      component="main"
    >
      <WithStyles(CssBaseline) />
      <div
        className="makeStyles-paper-1"
      >
        <WithStyles(ForwardRef(Avatar))
          className="makeStyles-avatar-2"
        >
          <pure(PermIdentityTwoToneIcon) />
        </WithStyles(ForwardRef(Avatar))>
        <WithStyles(ForwardRef(Typography))
          component="h1"
          variant="h5"
        >
          Sign in
        </WithStyles(ForwardRef(Typography))>
        <Formik
          enableReinitialize={false}
          initialValues={
            Object {
              "email": "",
              "password": "",
            }
          }
          isInitialValid={false}
          onSubmit={[Function]}
          validateOnBlur={true}
          validateOnChange={true}
          validationSchema={
            ObjectSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_defaultDefault": [Function],
              "_deps": Array [],
              "_excludedEdges": Array [],
              "_exclusive": Object {},
              "_mutate": undefined,
              "_nodes": Array [
                "password",
                "email",
              ],
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "object",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "fields": Object {
                "email": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "email": false,
                    "required": true,
                  },
                  "_mutate": undefined,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
                "password": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "required": true,
                  },
                  "_mutate": undefined,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                },
              },
              "tests": Array [],
              "transforms": Array [
                [Function],
              ],
            }
          }
        >
          <Component />
        </Formik>
      </div>
      <Styled(MuiBox)
        mt={8}
      />
    </div>
  </WithStyles(ForwardRef(Grid))>
</WithStyles(ForwardRef(Grid))>
`;
